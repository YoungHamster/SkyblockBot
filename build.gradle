plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

configurations {
    compileAndRuntime
    compileAndRuntime.transitive = true
    implementation.extendsFrom(compileAndRuntime)
}

private static def getJavaFxPlatform() {
    def os = System.getProperty('os.name').toLowerCase(Locale.ENGLISH)
    if (os.contains('win')) {
        return 'win'
    }
    if (os.contains('nix') || os.contains('nux')) {
        return 'linux'
    }
    if (os.contains('osx') || os.contains('mac')) {
        return 'mac'
    }
    assert false: "unknown os: $os"
}

dependencies {
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    // ебал я в рот вашу джаву с еёйными блять системами сборки. сука почему нельзя как в питоне????? да потому что тупые джависты блять
    shadow(implementation('mysql:mysql-connector-java:8.0.31'))
    // Apache http client
    shadow(implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3-alpha1')

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"


    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // javafx
    def jfxVersion = "21.0.1"
    def jfxPlatform = getJavaFxPlatform()
    compileAndRuntime "org.openjfx:javafx-base:${jfxVersion}:${jfxPlatform}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}


def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

javafx {
    version = "21.0.1"
    modules = [ 'javafx.base' ]
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set("dev")// Required by the 'shadowJar' task
    project.setProperty("mainClassName", "com.your.MainClass")
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.compileAndRuntime.collect { it.isDirectory() ? it : zipTree(it) } }


    doLast {
        copy {
            from 'build/libs/skyblock-bot-0.5-BETA.jar' // shortcut for createJar.outputs.files
            into "C:/Users/Nobody/AppData/Roaming/.minecraft/mods"
        }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
